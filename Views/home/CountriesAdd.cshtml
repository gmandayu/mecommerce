@{
    // View
    View = this;

    // Check action result
    if (countriesAdd.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!countriesAdd.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
var currentTable = @Html.Raw(ConvertToJson(countriesAdd.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { Countries: currentTable } });
var currentPageID = ew.PAGE_ID = "add";
var currentForm;
var fCountriesadd;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fCountriesadd")
        .setPageId("add")

        // Add fields
        .setFields([

            ["ISO", [fields.ISO.visible && fields.ISO.required ? ew.Validators.required(fields.ISO.caption) : null], fields.ISO.isInvalid],
            ["_Name", [fields._Name.visible && fields._Name.required ? ew.Validators.required(fields._Name.caption) : null], fields._Name.isInvalid],
            ["NiceName", [fields.NiceName.visible && fields.NiceName.required ? ew.Validators.required(fields.NiceName.caption) : null], fields.NiceName.isInvalid],
            ["ISO3", [fields.ISO3.visible && fields.ISO3.required ? ew.Validators.required(fields.ISO3.caption) : null], fields.ISO3.isInvalid],
            ["NumCode", [fields.NumCode.visible && fields.NumCode.required ? ew.Validators.required(fields.NumCode.caption) : null, ew.Validators.integer], fields.NumCode.isInvalid],
            ["PhoneCode", [fields.PhoneCode.visible && fields.PhoneCode.required ? ew.Validators.required(fields.PhoneCode.caption) : null, ew.Validators.integer], fields.PhoneCode.isInvalid],
            ["CreatedBy", [fields.CreatedBy.visible && fields.CreatedBy.required ? ew.Validators.required(fields.CreatedBy.caption) : null, ew.Validators.integer], fields.CreatedBy.isInvalid],
            ["CreatedDateTime", [fields.CreatedDateTime.visible && fields.CreatedDateTime.required ? ew.Validators.required(fields.CreatedDateTime.caption) : null, ew.Validators.datetime(fields.CreatedDateTime.clientFormatPattern)], fields.CreatedDateTime.isInvalid],
            ["UpdatedBy", [fields.UpdatedBy.visible && fields.UpdatedBy.required ? ew.Validators.required(fields.UpdatedBy.caption) : null, ew.Validators.integer], fields.UpdatedBy.isInvalid],
            ["UpdatedDateTime", [fields.UpdatedDateTime.visible && fields.UpdatedDateTime.required ? ew.Validators.required(fields.UpdatedDateTime.caption) : null, ew.Validators.datetime(fields.UpdatedDateTime.clientFormatPattern)], fields.UpdatedDateTime.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@countriesAdd.ShowPageHeader()
@countriesAdd.ShowMessages()
<form name="fCountriesadd" id="fCountriesadd" class="@(countriesAdd.FormClassName)" action="@AppPath(CurrentPageName())" method="post" novalidate autocomplete="off">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="insert">
<input type="hidden" name="modal" value="@ConvertToInt(countriesAdd.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(countriesAdd.OldKeyName)" value="@Html.Raw(countriesAdd.OldKey)">
<div class="ew-add-div"><!-- page* -->
@if (countriesAdd.ISO.Visible) { // countriesAdd.ISO.Visible (begin)
    <div id="r_ISO" @Html.Raw(countriesAdd.ISO.RowAttributes)>
        <label id="elh_Countries_ISO" for="x_ISO" class="@(countriesAdd.LeftColumnClass)">@Html.Raw(countriesAdd.ISO.Caption)@Html.Raw(countriesAdd.ISO.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(countriesAdd.RightColumnClass)"><div @Html.Raw(countriesAdd.ISO.CellAttributes)>
<span id="el_Countries_ISO">
<input type="@(countriesAdd.ISO.InputTextType)" name="x_ISO" id="x_ISO" data-table="Countries" data-field="x_ISO" value="@Html.Raw(countriesAdd.ISO.EditValue)" size="30" maxlength="2" placeholder="@Html.Raw(HtmlEncode(countriesAdd.ISO.PlaceHolder))" data-format-pattern="@(countriesAdd.ISO.FormatPattern)"@Html.Raw(countriesAdd.ISO.EditAttributes) aria-describedby="x_ISO_help">
@Html.Raw(countriesAdd.ISO.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(countriesAdd.ISO.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* countriesAdd.ISO.Visible (end) *@
@if (countriesAdd._Name.Visible) { // countriesAdd._Name.Visible (begin)
    <div id="r__Name" @Html.Raw(countriesAdd._Name.RowAttributes)>
        <label id="elh_Countries__Name" for="x__Name" class="@(countriesAdd.LeftColumnClass)">@Html.Raw(countriesAdd._Name.Caption)@Html.Raw(countriesAdd._Name.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(countriesAdd.RightColumnClass)"><div @Html.Raw(countriesAdd._Name.CellAttributes)>
<span id="el_Countries__Name">
<input type="@(countriesAdd._Name.InputTextType)" name="x__Name" id="x__Name" data-table="Countries" data-field="x__Name" value="@Html.Raw(countriesAdd._Name.EditValue)" size="30" maxlength="80" placeholder="@Html.Raw(HtmlEncode(countriesAdd._Name.PlaceHolder))" data-format-pattern="@(countriesAdd._Name.FormatPattern)"@Html.Raw(countriesAdd._Name.EditAttributes) aria-describedby="x__Name_help">
@Html.Raw(countriesAdd._Name.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(countriesAdd._Name.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* countriesAdd._Name.Visible (end) *@
@if (countriesAdd.NiceName.Visible) { // countriesAdd.NiceName.Visible (begin)
    <div id="r_NiceName" @Html.Raw(countriesAdd.NiceName.RowAttributes)>
        <label id="elh_Countries_NiceName" for="x_NiceName" class="@(countriesAdd.LeftColumnClass)">@Html.Raw(countriesAdd.NiceName.Caption)@Html.Raw(countriesAdd.NiceName.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(countriesAdd.RightColumnClass)"><div @Html.Raw(countriesAdd.NiceName.CellAttributes)>
<span id="el_Countries_NiceName">
<input type="@(countriesAdd.NiceName.InputTextType)" name="x_NiceName" id="x_NiceName" data-table="Countries" data-field="x_NiceName" value="@Html.Raw(countriesAdd.NiceName.EditValue)" size="30" maxlength="80" placeholder="@Html.Raw(HtmlEncode(countriesAdd.NiceName.PlaceHolder))" data-format-pattern="@(countriesAdd.NiceName.FormatPattern)"@Html.Raw(countriesAdd.NiceName.EditAttributes) aria-describedby="x_NiceName_help">
@Html.Raw(countriesAdd.NiceName.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(countriesAdd.NiceName.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* countriesAdd.NiceName.Visible (end) *@
@if (countriesAdd.ISO3.Visible) { // countriesAdd.ISO3.Visible (begin)
    <div id="r_ISO3" @Html.Raw(countriesAdd.ISO3.RowAttributes)>
        <label id="elh_Countries_ISO3" for="x_ISO3" class="@(countriesAdd.LeftColumnClass)">@Html.Raw(countriesAdd.ISO3.Caption)@Html.Raw(countriesAdd.ISO3.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(countriesAdd.RightColumnClass)"><div @Html.Raw(countriesAdd.ISO3.CellAttributes)>
<span id="el_Countries_ISO3">
<input type="@(countriesAdd.ISO3.InputTextType)" name="x_ISO3" id="x_ISO3" data-table="Countries" data-field="x_ISO3" value="@Html.Raw(countriesAdd.ISO3.EditValue)" size="30" maxlength="3" placeholder="@Html.Raw(HtmlEncode(countriesAdd.ISO3.PlaceHolder))" data-format-pattern="@(countriesAdd.ISO3.FormatPattern)"@Html.Raw(countriesAdd.ISO3.EditAttributes) aria-describedby="x_ISO3_help">
@Html.Raw(countriesAdd.ISO3.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(countriesAdd.ISO3.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* countriesAdd.ISO3.Visible (end) *@
@if (countriesAdd.NumCode.Visible) { // countriesAdd.NumCode.Visible (begin)
    <div id="r_NumCode" @Html.Raw(countriesAdd.NumCode.RowAttributes)>
        <label id="elh_Countries_NumCode" for="x_NumCode" class="@(countriesAdd.LeftColumnClass)">@Html.Raw(countriesAdd.NumCode.Caption)@Html.Raw(countriesAdd.NumCode.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(countriesAdd.RightColumnClass)"><div @Html.Raw(countriesAdd.NumCode.CellAttributes)>
<span id="el_Countries_NumCode">
<input type="@(countriesAdd.NumCode.InputTextType)" name="x_NumCode" id="x_NumCode" data-table="Countries" data-field="x_NumCode" value="@Html.Raw(countriesAdd.NumCode.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(countriesAdd.NumCode.PlaceHolder))" data-format-pattern="@(countriesAdd.NumCode.FormatPattern)"@Html.Raw(countriesAdd.NumCode.EditAttributes) aria-describedby="x_NumCode_help">
@Html.Raw(countriesAdd.NumCode.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(countriesAdd.NumCode.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* countriesAdd.NumCode.Visible (end) *@
@if (countriesAdd.PhoneCode.Visible) { // countriesAdd.PhoneCode.Visible (begin)
    <div id="r_PhoneCode" @Html.Raw(countriesAdd.PhoneCode.RowAttributes)>
        <label id="elh_Countries_PhoneCode" for="x_PhoneCode" class="@(countriesAdd.LeftColumnClass)">@Html.Raw(countriesAdd.PhoneCode.Caption)@Html.Raw(countriesAdd.PhoneCode.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(countriesAdd.RightColumnClass)"><div @Html.Raw(countriesAdd.PhoneCode.CellAttributes)>
<span id="el_Countries_PhoneCode">
<input type="@(countriesAdd.PhoneCode.InputTextType)" name="x_PhoneCode" id="x_PhoneCode" data-table="Countries" data-field="x_PhoneCode" value="@Html.Raw(countriesAdd.PhoneCode.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(countriesAdd.PhoneCode.PlaceHolder))" data-format-pattern="@(countriesAdd.PhoneCode.FormatPattern)"@Html.Raw(countriesAdd.PhoneCode.EditAttributes) aria-describedby="x_PhoneCode_help">
@Html.Raw(countriesAdd.PhoneCode.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(countriesAdd.PhoneCode.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* countriesAdd.PhoneCode.Visible (end) *@
@if (countriesAdd.CreatedBy.Visible) { // countriesAdd.CreatedBy.Visible (begin)
    <div id="r_CreatedBy" @Html.Raw(countriesAdd.CreatedBy.RowAttributes)>
        <label id="elh_Countries_CreatedBy" for="x_CreatedBy" class="@(countriesAdd.LeftColumnClass)">@Html.Raw(countriesAdd.CreatedBy.Caption)@Html.Raw(countriesAdd.CreatedBy.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(countriesAdd.RightColumnClass)"><div @Html.Raw(countriesAdd.CreatedBy.CellAttributes)>
<span id="el_Countries_CreatedBy">
<input type="@(countriesAdd.CreatedBy.InputTextType)" name="x_CreatedBy" id="x_CreatedBy" data-table="Countries" data-field="x_CreatedBy" value="@Html.Raw(countriesAdd.CreatedBy.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(countriesAdd.CreatedBy.PlaceHolder))" data-format-pattern="@(countriesAdd.CreatedBy.FormatPattern)"@Html.Raw(countriesAdd.CreatedBy.EditAttributes) aria-describedby="x_CreatedBy_help">
@Html.Raw(countriesAdd.CreatedBy.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(countriesAdd.CreatedBy.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* countriesAdd.CreatedBy.Visible (end) *@
@if (countriesAdd.CreatedDateTime.Visible) { // countriesAdd.CreatedDateTime.Visible (begin)
    <div id="r_CreatedDateTime" @Html.Raw(countriesAdd.CreatedDateTime.RowAttributes)>
        <label id="elh_Countries_CreatedDateTime" for="x_CreatedDateTime" class="@(countriesAdd.LeftColumnClass)">@Html.Raw(countriesAdd.CreatedDateTime.Caption)@Html.Raw(countriesAdd.CreatedDateTime.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(countriesAdd.RightColumnClass)"><div @Html.Raw(countriesAdd.CreatedDateTime.CellAttributes)>
<span id="el_Countries_CreatedDateTime">
<input type="@(countriesAdd.CreatedDateTime.InputTextType)" name="x_CreatedDateTime" id="x_CreatedDateTime" data-table="Countries" data-field="x_CreatedDateTime" value="@Html.Raw(countriesAdd.CreatedDateTime.EditValue)" placeholder="@Html.Raw(HtmlEncode(countriesAdd.CreatedDateTime.PlaceHolder))" data-format-pattern="@(countriesAdd.CreatedDateTime.FormatPattern)"@Html.Raw(countriesAdd.CreatedDateTime.EditAttributes) aria-describedby="x_CreatedDateTime_help">
@Html.Raw(countriesAdd.CreatedDateTime.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(countriesAdd.CreatedDateTime.GetErrorMessage())</div>
@if (!countriesAdd.CreatedDateTime.ReadOnly && !countriesAdd.CreatedDateTime.Disabled && !countriesAdd.CreatedDateTime.EditAttrs.Is("readonly") && !countriesAdd.CreatedDateTime.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fCountriesadd", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fCountriesadd", "x_CreatedDateTime", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
</div></div>
    </div>
} @* countriesAdd.CreatedDateTime.Visible (end) *@
@if (countriesAdd.UpdatedBy.Visible) { // countriesAdd.UpdatedBy.Visible (begin)
    <div id="r_UpdatedBy" @Html.Raw(countriesAdd.UpdatedBy.RowAttributes)>
        <label id="elh_Countries_UpdatedBy" for="x_UpdatedBy" class="@(countriesAdd.LeftColumnClass)">@Html.Raw(countriesAdd.UpdatedBy.Caption)@Html.Raw(countriesAdd.UpdatedBy.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(countriesAdd.RightColumnClass)"><div @Html.Raw(countriesAdd.UpdatedBy.CellAttributes)>
<span id="el_Countries_UpdatedBy">
<input type="@(countriesAdd.UpdatedBy.InputTextType)" name="x_UpdatedBy" id="x_UpdatedBy" data-table="Countries" data-field="x_UpdatedBy" value="@Html.Raw(countriesAdd.UpdatedBy.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(countriesAdd.UpdatedBy.PlaceHolder))" data-format-pattern="@(countriesAdd.UpdatedBy.FormatPattern)"@Html.Raw(countriesAdd.UpdatedBy.EditAttributes) aria-describedby="x_UpdatedBy_help">
@Html.Raw(countriesAdd.UpdatedBy.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(countriesAdd.UpdatedBy.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* countriesAdd.UpdatedBy.Visible (end) *@
@if (countriesAdd.UpdatedDateTime.Visible) { // countriesAdd.UpdatedDateTime.Visible (begin)
    <div id="r_UpdatedDateTime" @Html.Raw(countriesAdd.UpdatedDateTime.RowAttributes)>
        <label id="elh_Countries_UpdatedDateTime" for="x_UpdatedDateTime" class="@(countriesAdd.LeftColumnClass)">@Html.Raw(countriesAdd.UpdatedDateTime.Caption)@Html.Raw(countriesAdd.UpdatedDateTime.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(countriesAdd.RightColumnClass)"><div @Html.Raw(countriesAdd.UpdatedDateTime.CellAttributes)>
<span id="el_Countries_UpdatedDateTime">
<input type="@(countriesAdd.UpdatedDateTime.InputTextType)" name="x_UpdatedDateTime" id="x_UpdatedDateTime" data-table="Countries" data-field="x_UpdatedDateTime" value="@Html.Raw(countriesAdd.UpdatedDateTime.EditValue)" placeholder="@Html.Raw(HtmlEncode(countriesAdd.UpdatedDateTime.PlaceHolder))" data-format-pattern="@(countriesAdd.UpdatedDateTime.FormatPattern)"@Html.Raw(countriesAdd.UpdatedDateTime.EditAttributes) aria-describedby="x_UpdatedDateTime_help">
@Html.Raw(countriesAdd.UpdatedDateTime.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(countriesAdd.UpdatedDateTime.GetErrorMessage())</div>
@if (!countriesAdd.UpdatedDateTime.ReadOnly && !countriesAdd.UpdatedDateTime.Disabled && !countriesAdd.UpdatedDateTime.EditAttrs.Is("readonly") && !countriesAdd.UpdatedDateTime.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fCountriesadd", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fCountriesadd", "x_UpdatedDateTime", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
</div></div>
    </div>
} @* countriesAdd.UpdatedDateTime.Visible (end) *@
</div><!-- /page* -->
@{ countriesAdd.CloseRecordset(); }
@Html.Raw(countriesAdd.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(countriesAdd.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fCountriesadd">@Html.Raw(Language.Phrase("AddBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fCountriesadd" data-href="@AppPath(countriesAdd.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(countriesAdd.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
@countriesAdd.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("Countries");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
