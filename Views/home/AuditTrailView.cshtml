@{
    // View
    View = this;

    // Check action result
    if (auditTrailView.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!auditTrailView.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
@if (!auditTrailView.IsExport()) {
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
}
@if (!auditTrailView.IsExport()) {
<div class="btn-toolbar ew-toolbar">
    @auditTrailView.ExportOptions.RenderBody()
    @auditTrailView.OtherOptions.RenderBody()
</div>
}
@auditTrailView.ShowPageHeader()
@auditTrailView.ShowMessages()
<main class="view">
<form name="fAuditTrailview" id="fAuditTrailview" class="ew-form ew-view-form overlay-wrapper" action="@AppPath(CurrentPageName())" method="post" novalidate autocomplete="off">
@if (!auditTrailView.IsExport()) {
<script>
var currentTable = @Html.Raw(ConvertToJson(auditTrailView.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { AuditTrail: currentTable } });
var currentPageID = ew.PAGE_ID = "view";
var currentForm;
var fAuditTrailview;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fAuditTrailview")
        .setPageId("view")
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
}
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="modal" value="@ConvertToInt(auditTrailView.IsModal)">
<table class="@(auditTrailView.TableClass)">
@if (auditTrailView.Id.Visible) { // auditTrailView.Id.Visible (begin)
    <tr id="r_Id" @Html.Raw(auditTrailView.Id.RowAttributes)>
        <td class="@(auditTrailView.TableLeftColumnClass)"><span id="elh_AuditTrail_Id">@Html.Raw(auditTrailView.Id.Caption)</span></td>
        <td data-name="Id" @Html.Raw(auditTrailView.Id.CellAttributes)>
<span id="el_AuditTrail_Id">
<span @Html.Raw(auditTrailView.Id.ViewAttributes)>
@Html.Raw(auditTrailView.Id.GetViewValue())</span>
</span></td>
    </tr>
} @* auditTrailView.Id.Visible (end) *@
@if (auditTrailView._DateTime.Visible) { // auditTrailView._DateTime.Visible (begin)
    <tr id="r__DateTime" @Html.Raw(auditTrailView._DateTime.RowAttributes)>
        <td class="@(auditTrailView.TableLeftColumnClass)"><span id="elh_AuditTrail__DateTime">@Html.Raw(auditTrailView._DateTime.Caption)</span></td>
        <td data-name="_DateTime" @Html.Raw(auditTrailView._DateTime.CellAttributes)>
<span id="el_AuditTrail__DateTime">
<span @Html.Raw(auditTrailView._DateTime.ViewAttributes)>
@Html.Raw(auditTrailView._DateTime.GetViewValue())</span>
</span></td>
    </tr>
} @* auditTrailView._DateTime.Visible (end) *@
@if (auditTrailView.Script.Visible) { // auditTrailView.Script.Visible (begin)
    <tr id="r_Script" @Html.Raw(auditTrailView.Script.RowAttributes)>
        <td class="@(auditTrailView.TableLeftColumnClass)"><span id="elh_AuditTrail_Script">@Html.Raw(auditTrailView.Script.Caption)</span></td>
        <td data-name="Script" @Html.Raw(auditTrailView.Script.CellAttributes)>
<span id="el_AuditTrail_Script">
<span @Html.Raw(auditTrailView.Script.ViewAttributes)>
@Html.Raw(auditTrailView.Script.GetViewValue())</span>
</span></td>
    </tr>
} @* auditTrailView.Script.Visible (end) *@
@if (auditTrailView._User.Visible) { // auditTrailView._User.Visible (begin)
    <tr id="r__User" @Html.Raw(auditTrailView._User.RowAttributes)>
        <td class="@(auditTrailView.TableLeftColumnClass)"><span id="elh_AuditTrail__User">@Html.Raw(auditTrailView._User.Caption)</span></td>
        <td data-name="_User" @Html.Raw(auditTrailView._User.CellAttributes)>
<span id="el_AuditTrail__User">
<span @Html.Raw(auditTrailView._User.ViewAttributes)>
@Html.Raw(auditTrailView._User.GetViewValue())</span>
</span></td>
    </tr>
} @* auditTrailView._User.Visible (end) *@
@if (auditTrailView._Action.Visible) { // auditTrailView._Action.Visible (begin)
    <tr id="r__Action" @Html.Raw(auditTrailView._Action.RowAttributes)>
        <td class="@(auditTrailView.TableLeftColumnClass)"><span id="elh_AuditTrail__Action">@Html.Raw(auditTrailView._Action.Caption)</span></td>
        <td data-name="_Action" @Html.Raw(auditTrailView._Action.CellAttributes)>
<span id="el_AuditTrail__Action">
<span @Html.Raw(auditTrailView._Action.ViewAttributes)>
@Html.Raw(auditTrailView._Action.GetViewValue())</span>
</span></td>
    </tr>
} @* auditTrailView._Action.Visible (end) *@
@if (auditTrailView._Table.Visible) { // auditTrailView._Table.Visible (begin)
    <tr id="r__Table" @Html.Raw(auditTrailView._Table.RowAttributes)>
        <td class="@(auditTrailView.TableLeftColumnClass)"><span id="elh_AuditTrail__Table">@Html.Raw(auditTrailView._Table.Caption)</span></td>
        <td data-name="_Table" @Html.Raw(auditTrailView._Table.CellAttributes)>
<span id="el_AuditTrail__Table">
<span @Html.Raw(auditTrailView._Table.ViewAttributes)>
@Html.Raw(auditTrailView._Table.GetViewValue())</span>
</span></td>
    </tr>
} @* auditTrailView._Table.Visible (end) *@
@if (auditTrailView._Field.Visible) { // auditTrailView._Field.Visible (begin)
    <tr id="r__Field" @Html.Raw(auditTrailView._Field.RowAttributes)>
        <td class="@(auditTrailView.TableLeftColumnClass)"><span id="elh_AuditTrail__Field">@Html.Raw(auditTrailView._Field.Caption)</span></td>
        <td data-name="_Field" @Html.Raw(auditTrailView._Field.CellAttributes)>
<span id="el_AuditTrail__Field">
<span @Html.Raw(auditTrailView._Field.ViewAttributes)>
@Html.Raw(auditTrailView._Field.GetViewValue())</span>
</span></td>
    </tr>
} @* auditTrailView._Field.Visible (end) *@
@if (auditTrailView.KeyValue.Visible) { // auditTrailView.KeyValue.Visible (begin)
    <tr id="r_KeyValue" @Html.Raw(auditTrailView.KeyValue.RowAttributes)>
        <td class="@(auditTrailView.TableLeftColumnClass)"><span id="elh_AuditTrail_KeyValue">@Html.Raw(auditTrailView.KeyValue.Caption)</span></td>
        <td data-name="KeyValue" @Html.Raw(auditTrailView.KeyValue.CellAttributes)>
<span id="el_AuditTrail_KeyValue">
<span @Html.Raw(auditTrailView.KeyValue.ViewAttributes)>
@Html.Raw(auditTrailView.KeyValue.GetViewValue())</span>
</span></td>
    </tr>
} @* auditTrailView.KeyValue.Visible (end) *@
@if (auditTrailView.OldValue.Visible) { // auditTrailView.OldValue.Visible (begin)
    <tr id="r_OldValue" @Html.Raw(auditTrailView.OldValue.RowAttributes)>
        <td class="@(auditTrailView.TableLeftColumnClass)"><span id="elh_AuditTrail_OldValue">@Html.Raw(auditTrailView.OldValue.Caption)</span></td>
        <td data-name="OldValue" @Html.Raw(auditTrailView.OldValue.CellAttributes)>
<span id="el_AuditTrail_OldValue">
<span @Html.Raw(auditTrailView.OldValue.ViewAttributes)>
@Html.Raw(auditTrailView.OldValue.GetViewValue())</span>
</span></td>
    </tr>
} @* auditTrailView.OldValue.Visible (end) *@
@if (auditTrailView.NewValue.Visible) { // auditTrailView.NewValue.Visible (begin)
    <tr id="r_NewValue" @Html.Raw(auditTrailView.NewValue.RowAttributes)>
        <td class="@(auditTrailView.TableLeftColumnClass)"><span id="elh_AuditTrail_NewValue">@Html.Raw(auditTrailView.NewValue.Caption)</span></td>
        <td data-name="NewValue" @Html.Raw(auditTrailView.NewValue.CellAttributes)>
<span id="el_AuditTrail_NewValue">
<span @Html.Raw(auditTrailView.NewValue.ViewAttributes)>
@Html.Raw(auditTrailView.NewValue.GetViewValue())</span>
</span></td>
    </tr>
} @* auditTrailView.NewValue.Visible (end) *@
</table>
@{ auditTrailView.CloseRecordset(); }
</form>
@if (!auditTrailView.IsModal) {
if (!auditTrailView.IsExport()) {
<div><!-- DN -->
@auditTrailView.Pager.Render()
</div>
}
}
</main>
@auditTrailView.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
@if (!auditTrailView.IsExport()) {
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
}
