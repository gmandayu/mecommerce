@{
    // View
    View = this;

    // Check action result
    if (subscriptionsAdd.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!subscriptionsAdd.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
var currentTable = @Html.Raw(ConvertToJson(subscriptionsAdd.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { Subscriptions: currentTable } });
var currentPageID = ew.PAGE_ID = "add";
var currentForm;
var fSubscriptionsadd;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fSubscriptionsadd")
        .setPageId("add")

        // Add fields
        .setFields([

            ["_User", [fields._User.visible && fields._User.required ? ew.Validators.required(fields._User.caption) : null], fields._User.isInvalid],
            ["Endpoint", [fields.Endpoint.visible && fields.Endpoint.required ? ew.Validators.required(fields.Endpoint.caption) : null], fields.Endpoint.isInvalid],
            ["PublicKey", [fields.PublicKey.visible && fields.PublicKey.required ? ew.Validators.required(fields.PublicKey.caption) : null], fields.PublicKey.isInvalid],
            ["AuthenticationToken", [fields.AuthenticationToken.visible && fields.AuthenticationToken.required ? ew.Validators.required(fields.AuthenticationToken.caption) : null], fields.AuthenticationToken.isInvalid],
            ["ContentEncoding", [fields.ContentEncoding.visible && fields.ContentEncoding.required ? ew.Validators.required(fields.ContentEncoding.caption) : null], fields.ContentEncoding.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@subscriptionsAdd.ShowPageHeader()
@subscriptionsAdd.ShowMessages()
<form name="fSubscriptionsadd" id="fSubscriptionsadd" class="@(subscriptionsAdd.FormClassName)" action="@AppPath(CurrentPageName())" method="post" novalidate autocomplete="off">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="insert">
<input type="hidden" name="modal" value="@ConvertToInt(subscriptionsAdd.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(subscriptionsAdd.OldKeyName)" value="@Html.Raw(subscriptionsAdd.OldKey)">
<div class="ew-add-div"><!-- page* -->
@if (subscriptionsAdd._User.Visible) { // subscriptionsAdd._User.Visible (begin)
    <div id="r__User" @Html.Raw(subscriptionsAdd._User.RowAttributes)>
        <label id="elh_Subscriptions__User" for="x__User" class="@(subscriptionsAdd.LeftColumnClass)">@Html.Raw(subscriptionsAdd._User.Caption)@Html.Raw(subscriptionsAdd._User.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(subscriptionsAdd.RightColumnClass)"><div @Html.Raw(subscriptionsAdd._User.CellAttributes)>
<span id="el_Subscriptions__User">
<input type="@(subscriptionsAdd._User.InputTextType)" name="x__User" id="x__User" data-table="Subscriptions" data-field="x__User" value="@Html.Raw(subscriptionsAdd._User.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(subscriptionsAdd._User.PlaceHolder))" data-format-pattern="@(subscriptionsAdd._User.FormatPattern)"@Html.Raw(subscriptionsAdd._User.EditAttributes) aria-describedby="x__User_help">
@Html.Raw(subscriptionsAdd._User.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(subscriptionsAdd._User.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* subscriptionsAdd._User.Visible (end) *@
@if (subscriptionsAdd.Endpoint.Visible) { // subscriptionsAdd.Endpoint.Visible (begin)
    <div id="r_Endpoint" @Html.Raw(subscriptionsAdd.Endpoint.RowAttributes)>
        <label id="elh_Subscriptions_Endpoint" for="x_Endpoint" class="@(subscriptionsAdd.LeftColumnClass)">@Html.Raw(subscriptionsAdd.Endpoint.Caption)@Html.Raw(subscriptionsAdd.Endpoint.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(subscriptionsAdd.RightColumnClass)"><div @Html.Raw(subscriptionsAdd.Endpoint.CellAttributes)>
<span id="el_Subscriptions_Endpoint">
<textarea data-table="Subscriptions" data-field="x_Endpoint" name="x_Endpoint" id="x_Endpoint" cols="35" rows="4" placeholder="@Html.Raw(HtmlEncode(subscriptionsAdd.Endpoint.PlaceHolder))"@Html.Raw(subscriptionsAdd.Endpoint.EditAttributes) aria-describedby="x_Endpoint_help">@(subscriptionsAdd.Endpoint.EditValue)</textarea>
@Html.Raw(subscriptionsAdd.Endpoint.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(subscriptionsAdd.Endpoint.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* subscriptionsAdd.Endpoint.Visible (end) *@
@if (subscriptionsAdd.PublicKey.Visible) { // subscriptionsAdd.PublicKey.Visible (begin)
    <div id="r_PublicKey" @Html.Raw(subscriptionsAdd.PublicKey.RowAttributes)>
        <label id="elh_Subscriptions_PublicKey" for="x_PublicKey" class="@(subscriptionsAdd.LeftColumnClass)">@Html.Raw(subscriptionsAdd.PublicKey.Caption)@Html.Raw(subscriptionsAdd.PublicKey.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(subscriptionsAdd.RightColumnClass)"><div @Html.Raw(subscriptionsAdd.PublicKey.CellAttributes)>
<span id="el_Subscriptions_PublicKey">
<input type="@(subscriptionsAdd.PublicKey.InputTextType)" name="x_PublicKey" id="x_PublicKey" data-table="Subscriptions" data-field="x_PublicKey" value="@Html.Raw(subscriptionsAdd.PublicKey.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(subscriptionsAdd.PublicKey.PlaceHolder))" data-format-pattern="@(subscriptionsAdd.PublicKey.FormatPattern)"@Html.Raw(subscriptionsAdd.PublicKey.EditAttributes) aria-describedby="x_PublicKey_help">
@Html.Raw(subscriptionsAdd.PublicKey.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(subscriptionsAdd.PublicKey.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* subscriptionsAdd.PublicKey.Visible (end) *@
@if (subscriptionsAdd.AuthenticationToken.Visible) { // subscriptionsAdd.AuthenticationToken.Visible (begin)
    <div id="r_AuthenticationToken" @Html.Raw(subscriptionsAdd.AuthenticationToken.RowAttributes)>
        <label id="elh_Subscriptions_AuthenticationToken" for="x_AuthenticationToken" class="@(subscriptionsAdd.LeftColumnClass)">@Html.Raw(subscriptionsAdd.AuthenticationToken.Caption)@Html.Raw(subscriptionsAdd.AuthenticationToken.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(subscriptionsAdd.RightColumnClass)"><div @Html.Raw(subscriptionsAdd.AuthenticationToken.CellAttributes)>
<span id="el_Subscriptions_AuthenticationToken">
<input type="@(subscriptionsAdd.AuthenticationToken.InputTextType)" name="x_AuthenticationToken" id="x_AuthenticationToken" data-table="Subscriptions" data-field="x_AuthenticationToken" value="@Html.Raw(subscriptionsAdd.AuthenticationToken.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(subscriptionsAdd.AuthenticationToken.PlaceHolder))" data-format-pattern="@(subscriptionsAdd.AuthenticationToken.FormatPattern)"@Html.Raw(subscriptionsAdd.AuthenticationToken.EditAttributes) aria-describedby="x_AuthenticationToken_help">
@Html.Raw(subscriptionsAdd.AuthenticationToken.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(subscriptionsAdd.AuthenticationToken.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* subscriptionsAdd.AuthenticationToken.Visible (end) *@
@if (subscriptionsAdd.ContentEncoding.Visible) { // subscriptionsAdd.ContentEncoding.Visible (begin)
    <div id="r_ContentEncoding" @Html.Raw(subscriptionsAdd.ContentEncoding.RowAttributes)>
        <label id="elh_Subscriptions_ContentEncoding" for="x_ContentEncoding" class="@(subscriptionsAdd.LeftColumnClass)">@Html.Raw(subscriptionsAdd.ContentEncoding.Caption)@Html.Raw(subscriptionsAdd.ContentEncoding.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(subscriptionsAdd.RightColumnClass)"><div @Html.Raw(subscriptionsAdd.ContentEncoding.CellAttributes)>
<span id="el_Subscriptions_ContentEncoding">
<input type="@(subscriptionsAdd.ContentEncoding.InputTextType)" name="x_ContentEncoding" id="x_ContentEncoding" data-table="Subscriptions" data-field="x_ContentEncoding" value="@Html.Raw(subscriptionsAdd.ContentEncoding.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(subscriptionsAdd.ContentEncoding.PlaceHolder))" data-format-pattern="@(subscriptionsAdd.ContentEncoding.FormatPattern)"@Html.Raw(subscriptionsAdd.ContentEncoding.EditAttributes) aria-describedby="x_ContentEncoding_help">
@Html.Raw(subscriptionsAdd.ContentEncoding.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(subscriptionsAdd.ContentEncoding.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* subscriptionsAdd.ContentEncoding.Visible (end) *@
</div><!-- /page* -->
@{ subscriptionsAdd.CloseRecordset(); }
@Html.Raw(subscriptionsAdd.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(subscriptionsAdd.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fSubscriptionsadd">@Html.Raw(Language.Phrase("AddBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fSubscriptionsadd" data-href="@AppPath(subscriptionsAdd.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(subscriptionsAdd.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
@subscriptionsAdd.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("Subscriptions");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
