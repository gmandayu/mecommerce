@{
    // View
    View = this;

    // Check action result
    if (resetPassword.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!resetPassword.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
<script>
var freset_password;
loadjs.ready(["wrapper", "head"], function() {
    let $ = jQuery;
    ew.PAGE_ID ||= "reset_password";
    window.currentPageID ||= "reset_password";
    let form = new ew.FormBuilder()
        .setId("freset_password")
        // Add field
        .addFields([

            ["email", [ew.Validators.required(ew.language.phrase("Email")), ew.Validators.email], @(resetPassword.EmailAddress.IsInvalid ? "true" : "false")]
        ])

        // Validate
        .setValidate(
            async function() {
                if (!this.validateRequired)
                    return true; // Ignore validation
                var fobj = this.getForm();

                // Validate fields
                if (!this.validateFields())
                    return false;

                // Call Form_CustomValidate event
                if (!(await this.customValidate?.(fobj) ?? true)) {
                    this.focus();
                    return false;
                }
                return true;
            }
        )

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation
        .setValidateRequired(ew.CLIENT_VALIDATE)
        .build();
    window[form.id] = form;
    window.currentForm ||= form;
    loadjs.done(form.id);
});
</script>
@resetPassword.ShowPageHeader()
@resetPassword.ShowMessages()
<form name="freset_password" id="freset_password" class="ew-form ew-forgot-pwd-form" action="@AppPath(CurrentPageName())" method="post" novalidate autocomplete="off">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="modal" value="@(ConvertToInt(resetPassword.IsModal))">
<div class="ew-reset-pwd-box">
<div class="card">
<div class="card-body">
<p class="login-box-msg">@Html.Raw(Language.Phrase("ResetPwdTitle"))</p>
    <div class="row gx-0">
        <input type="text" name="@Html.Raw(resetPassword.EmailAddress.FieldVar)" id="@Html.Raw(resetPassword.EmailAddress.FieldVar)" value="@(HtmlEncode(resetPassword.EmailAddress.CurrentValue))" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(Language.Phrase("UserEmail", true)))" @Html.Raw(resetPassword.EmailAddress.EditAttributes)>
        <div class="invalid-feedback">@Html.Raw(Language.Phrase("IncorrectEmail"))</div>
    </div>
<div class="d-grid mb-3">
    <button class="btn btn-primary ew-btn disabled enable-on-init" name="btn-submit" id="btn-submit" type="submit">@Html.Raw(Language.Phrase("SendPwd"))</button>
</div>
</div>
</div>
</div>
</form>
@resetPassword.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
loadjs.ready("load", function() {
    // Write your startup script here
    // document.write("page loaded");
});
</script>
